#/bin/bash
# where am i? move to where I am. This ensures source is properly sourced
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

while [ $# -gt 0 ]; do
  ARGUMENT=$1 # example --name=value

  ARGUMENT=$(sed 's/=.*$//g' <<< "$ARGUMENT")
  ARGUMENT=$(sed 's/--//g' <<< "$ARGUMENT")

  VALUE="${1#*=}"
  case $ARGUMENT in
  "action")
    ARG_ACTION=$VALUE
    ;;
  "folder")
    ARG_FOLDER=$VALUE
    ;;
  "shortname")
    ARG_SHORTNAME=$VALUE
    ;;
  "dbfile")
    ARG_DBFILE=$VALUE
    ;;
  esac
  shift
done

# SYNC ########################
# REQURED PARAMS:
# --action=sync
# --folder=[folder]
if [[ $ARG_ACTION == "sync" ]]; then
  echo "Syncing from vagrant to web directory"
  SOURCE="/vagrant/www/$ARG_FOLDER/"
  DESTINATION="/var/www/$ARG_FOLDER/"
  #VAGRANT SSH
  echo "#################################"
vagrant ssh -- -T << SYNC
sudo rsync --chmod=ug+rwX -rtlp $SOURCE $DESTINATION
SYNC
  echo "#################################"

  #/VAGRANT SSH
fi

# RMDIR ########################
# REQURED PARAMS:
# --action=vhost
# --folder=[folder]
if [[ $ARG_ACTION == "rmdir" ]]; then
  echo "Removing dir from web directory"

  echo "#################################"
  vagrant ssh -- -T << RMDIR
  cd /var/www
  sudo rm -rf $ARG_FOLDER
RMDIR
  echo "#################################"
fi

# VHOST ########################
# REQURED PARAMS:
# --action=vhost
# --shortname=[shortname]
# --folder=[folder]
if [[ $ARG_ACTION == "vhost" ]]; then
  # cp vhost-template.conf to new site conf
  SITE_CONF="vagrant-$ARG_SHORTNAME.local.conf"
  cp vhost-template.conf $SITE_CONF
  # replace 'REPLACESHORTNAME' with $ARG_SHORTNAME and
  sed -i s/REPLACESHORTNAME/$ARG_SHORTNAME/g $SITE_CONF
  # replace 'REPLACEFOLDER' with $ARG_FOLDER in vhost file
  sed -i s/REPLACEFOLDER/$ARG_FOLDER/g $SITE_CONF

vagrant ssh -- -T << VHOST
cd /vagrant
# mv new site conf to /etc/apache2/sites-available
sudo mv $SITE_CONF /etc/apache2/sites-available/$SITE_CONF
# enable the newly created site/vhost
sudo a2ensite $SITE_CONF
# reload apache2 so vhosts take effect
sudo service apache2 restart
VHOST
  echo "echoing vagrant ip:"
  VM_IP=$(cat $DIR/puphpet/config.yaml | grep 'private_network: ' | sed -e 's/^.*private_network: //' -e 's/\/.*$//')
  echo $VM_IP
  LOCAL_DOMAIN="vagrant-$ARG_SHORTNAME.local"
  HOSTS_LINE="$VM_IP  $LOCAL_DOMAIN"
  $(grep "$HOSTS_LINE" /etc/hosts) || sudo -- sh -c -e "echo '$HOSTS_LINE' >> /etc/hosts"
fi

# VHOST-RM ########################
# REQURED PARAMS:
# --action=vhost
# --shortname=[shortname]
if [[ $ARG_ACTION == "vhost-rm" ]]; then
  SITE_CONF="vagrant-$ARG_SHORTNAME.local.conf"

vagrant ssh -- -T << VHOST
# enable the newly created site/vhost
sudo a2dissite $SITE_CONF
# reload apache2 so vhosts take effect
sudo service apache2 restart
# remove new site conf from /etc/apache2/sites-available
sudo rm /etc/apache2/sites-available/$SITE_CONF
VHOST
fi

# FIXPERMS ########################
# REQURED PARAMS:
# --action=fixperms
# --folder=[folder]
if [[ $ARG_ACTION == "fixperms" ]]; then

vagrant ssh -- -T << FIXPERMS

cd /var/www/$ARG_FOLDER
sudo chown -R root:www-data .
find . -type d -exec sudo chmod u=rwx,g=rx,o= '{}' \;
find . -type f -exec sudo chmod u=rw,g=r,o= '{}' \;

cd sites
find . -type d -name files -exec sudo chmod ug=rwx,o= '{}' \;
for d in ./*/files
do
   find $d -type d -exec sudo chmod ug=rwx,o= '{}' \;
   find $d -type f -exec sudo chmod ug=rw,o= '{}' \;
done

FIXPERMS
fi

# DBCREATE ########################
# REQURED PARAMS:
# --action=dbcreate
# --shortname=[shortname]
if [[ $ARG_ACTION == "dbcreate" ]]; then

  vagrant ssh -- -T << DBCREATE
echo "Creating database, user, and password"
mysql -u root -proot -t << MYSQL

DROP DATABASE IF EXISTS $ARG_SHORTNAME;
CREATE DATABASE $ARG_SHORTNAME COLLATE 'utf8_general_ci';
GRANT ALL PRIVILEGES ON $ARG_SHORTNAME.* TO '$ARG_SHORTNAME'@'localhost';
SET old_passwords = 0;
SET PASSWORD FOR '$ARG_SHORTNAME'@'localhost' = PASSWORD('$ARG_SHORTNAME');
FLUSH PRIVILEGES;

MYSQL
DBCREATE
fi

# DBIMPORT ########################
# REQURED PARAMS:
# --action=dbimport
# --shortname=[shortname]
# --dbfile=[db_file_name.sql]
if [[ $ARG_ACTION == "dbimport" ]]; then

  vagrant ssh -- -T << DBIMPORT
echo "Importing database"
mysql -u root -proot -t << MYSQL

USE $ARG_SHORTNAME;
SOURCE /vagrant/files/$ARG_DBFILE;

MYSQL
DBIMPORT
fi

# DBDELETE ########################
# REQURED PARAMS:
# --action=dbdelete
# --shortname=[shortname]
if [[ $ARG_ACTION == "dbdelete" ]]; then

  vagrant ssh -- -T << DBCREATE
echo "Creating database, user, and password"
mysql -u root -proot -t << MYSQL

DROP DATABASE IF EXISTS $ARG_SHORTNAME;
FLUSH PRIVILEGES;

MYSQL
DBCREATE
fi
